Part 1

Section 6.2 of your textbook describes incremental development. Do the exercise at the end of that section:

As an exercise, use incremental development to write a function called hypotenuse that returns the length of the hypotenuse of a right triangle given the lengths of the other two legs as arguments. Record each stage of the development process as you go. (Downey, 2015)

After the final stage of development, print the output of hypotenuse(3, 4) and two other calls to hypotenuse with different arguments.

Include all of the following in your Learning Journal:

An explanation of each stage of development, including code and any test input and output.
The output of hypotenuse(3,4).
The output of two additional calls to hypotenuse with different arguments.
def hypotenuse(a,b): #Outline of the function

    return 0.0

hypotenuse(6,9): #sample arguments

>>> 
def hypotenuse(a,b): # Temporary varriable and prints them

    asquared = a**2

    bsquared = b**2

    print("asquare is: ",asquared)

    print("bsquare is: ",bsquared)

    return 0.0

hypotenuse(6,9)

asquare is:  36
bsquare is:  81
>>> 

def hypotenuse(a,b): #compute the sum of squares of asquared and bsquared

    asquared = a**2

    bsquared = b**2

    csquared = asquared + bsquared

    print("csquare is: ",csquared)

    return 0.0

hypotenuse(6,9)

csquare is:  117
>>> 
import math

def hypotenuse(a,b): # use math.sqrt to compute and return the result

    asquared = a**2

    bsquared = b**2

    csquared = asquared + bsquared

    result = math.sqrt(csquared)

    print("result is: ",result)

    return 0.0

hypotenuse(6,9)

result is:  10.816653826391969
>>> 
import math

def hypotenuse(a,b): # Finally, use math.sqrt to compute and return the result

    asquared = a**2

    bsquared = b**2

    csquared = asquared + bsquared

    result = math.sqrt(csquared)

    return result

hypotenuse(6,9)

>>> 
def hypotenuse(a,b): #Optional print the value of result before the return the result

    asquared = a**2

    bsquared = b**2

    csquared = asquared + bsquared

    result = math.sqrt(csquared)

    print("result: ",result)

    return result





The output of hypotenuse(3,4).
import math

def hypotenuse(a,b): 

    asquared = a**2

    bsquared = b**2

    csquared = asquared + bsquared

    result = math.sqrt(csquared)

    print("result: ",result)

    return result

hypotenuse(3,4)

result:  5.0
>>> 

The output of two additional calls to hypotenuse with different arguments.

hypotenuse(5,8)

hypotenuse(12,15)

hypotenuse(22,35)

result:  9.433981132056603
result:  19.209372712298546
result:  41.340053217188775
>>> 
Part 2

Invent your own function that does some useful computation of your choosing. Do not copy the function from somewhere else. Use incremental development, and record each stage of the development process as you go. Finally, print output that demonstrates that the function works as you intended.

Include all of the following in your Learning Journal:

An explanation of each stage of development, including code and any test input and output.
The output of three calls to your function with different arguments.
def find_side_by_cosine_rule(a,b,angleC): #Outline of the function

    return 0.0

>>> 
import math

def find_side_by_cosine_rule(a,b,angleC):

    return 0.0

find_side_by_cosine_rule(5,7,math.pi/6) #sample arguments

>>> 
import math

def find_side_by_cosine_rule(a,b,angleC): # Temporary varriable and prints them

    asquared = a**2

    bsquared = b**2

    two_abcosC = 2*a*b*math.cos(angleC)

    print("asquared is: ",asquared)

    print("bsquared is: ",bsquared)

    print("two_abcosC is: ",two_abcosC)

    return 0.0

find_side_by_cosine_rule(5,7,math.pi/6)

asquared is:  25
bsquared is:  49
two_abcosC is:  60.62177826491071
>>> 
import math

def find_side_by_cosine_rule(a,b,angleC): #compute the sum of squares of asquared and bsquared minus two_abcosC

    asquared = a**2

    bsquared = b**2

    two_abcosC = 2*a*b*math.cos(angleC)

    csquared =asquared + bsquared - two_abcosC

    print("csquared is: ",csquared)

    return 0.0

find_side_by_cosine_rule(5,7,math.pi/6)

csquared is:  13.37822173508929
>>> 

import math

def find_side_by_cosine_rule(a,b,angleC): #use math.sqrt to compute and print the result

    asquared = a**2

    bsquared = b**2

    two_abcosC = 2*a*b*math.cos(angleC)

    csquared =asquared + bsquared - two_abcosC

    result = math.sqrt(csquared)

    print("result is: ",result)

    return 0.0

find_side_by_cosine_rule(5,7,math.pi/6)

result is:  3.6576251496140624
>>> 


import math

def find_side_by_cosine_rule(a,b,angleC): # use math.sqrt to compute and return the result

    asquared = a**2

    bsquared = b**2

    two_abcosC = 2*a*b*math.cos(angleC)

    csquared =asquared + bsquared - two_abcosC

    result = math.sqrt(csquared)

    print("result is: ",result)

    return result

find_side_by_cosine_rule(5,7,math.pi/6)

result is:  3.6576251496140624
>>>

import math

def find_side_by_cosine_rule(a,b,angleC): #Print the value of result before the return the result

    asquared = a**2

    bsquared = b**2

    two_abcosC = 2*a*b*math.cos(angleC)

    csquared =asquared + bsquared - two_abcosC

    result = math.sqrt(csquared)

    print("result is: ",result)

    return result

find_side_by_cosine_rule(6,7,math.pi/3)

find_side_by_cosine_rule(8,9,math.pi/4)

find_side_by_cosine_rule(4,6,math.pi/6)

result is:  6.557438524302
result is:  6.570892139514782
result is:  3.229671905681279
>>> 